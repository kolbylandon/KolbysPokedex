"use strict";import*as pokemon from"./pokemon.js";const headers={accept:"text/html,application/xhtml+xml",method:"GET",connection:"keep-alive",host:"pokeapi.co"};async function requestPokemon(pokedexNumber,state){let pokemonResponse=null;await fetch(`https://pokeapi.co/api/v2/pokemon/${pokedexNumber}/`,headers).then(response=>response.ok?Promise.resolve(response.json()):Promise.reject(response)).then(data=>(pokemonResponse=data,fetch(pokemonResponse.species.url,headers))).then(response=>response.ok?Promise.resolve(response.json()):Promise.reject(response)).then(speciesResponse=>pokemon.populatePage(pokemonResponse,speciesResponse,state)).catch(exception=>{const errorMessage=`Status ${exception.status}: '${exception.url}' is ${exception.statusText}`;alert(errorMessage),console.error(errorMessage)})}async function requestAbilityEffect(url,listItem,name){await fetch(url,headers).then(response=>response.ok?Promise.resolve(response.json()):Promise.reject(response)).then(abilityEffectResponse=>{for(let index in abilityEffectResponse.flavor_text_entries)"en"===abilityEffectResponse.flavor_text_entries[index].language.name&&(listItem.innerHTML=`<u>${name}:</u> ${abilityEffectResponse.flavor_text_entries[index].flavor_text}`)}).catch(exception=>{const errorMessage=`Status ${exception.status}: '${exception.url}' is ${exception.statusText}`;alert(errorMessage),console.error(errorMessage)})}export{requestPokemon,requestAbilityEffect};