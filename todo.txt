TO DO
-----------------------------------------------------------------------------------------
006) Show move sets in a grid including other information about the attack.
011) Explore https://pokeapi.co/api/v2/ for new items to add to the info screen.
018) Use the glass instead of the screen or info-screen.
022) Rewrite javascript files in typescript.
026) Search footprints on the API, if they exist, show them in the info screen.
030) Add console logs to the script.
037) Hover over the abilities and see what the ability does.
039) Hover over the types and get the strengths and weaknesses of the type.
042) Host this site so others can see it.
047) Click the Info header text to switch to old css.
057) Create two functions for front and back sprites to create less text.
058) Hover over the held items and create a tooltip to see what they item does.
068) Recreate API using MongoDB and NodeJS.
072) See if API has images for Held Items.
073) Create a getFunctions.js file for all of the functions getting information.
075) Create html elements for other screen sizes from the media queries.
076) Create a custom stylized scrollbar.
083) Have the id as a parameter the URL and pass use that to fetch the requests.
086) Add a tooltip for the short description of the ability on hover.
087) Add animations to buttons and root when the elements appear and disappear. 
088) Break up the helpers.js file into smaller modules.
090) Switch to searching by Pokémon name by clicking the info text in the header.
092) Use the images from the held items as the bullets for the items list.
093) Use Service Worker to get fetch the other forms' information.
094) See if other forms have other Pokédex entries.
097) Rewrite with TailwindCSS.
098) Rewrite in a JS framework, most likely React or Svelte.
100) Create a service worker to fetch other forms' data in the background.
103) Add a button for speech recognition. Example: https://blog.openreplay.com/recognizing-speech-with-vanilla-javascript
110) Have a Pokémon counter that shows how many the user has viewed in LocalStorage.
111) Switch Female to Male when the female sprites are showing.
112) Dynamically call CSS modules.
113) Combine functions that manipulate the Pokémon name and call it manipulateName.
115) Use the DeviceOrientation event listener when the device is mobile or tablet.
116) Create UI chips to go under the Header buttons to display what to show.
117) Look into ChalkJs for better logging.
118) Create a tooltip the type buttons to let the user know what clicking does.
119) Recreate UI for Flat UI look.
120) Recreate UI with NES.CSS (https://nostalgic-css.github.io/NES.css/).
121) Create a toggle list of all headers to be shown or hidden in 'info-card'.
122) Fix localStorage so that it is populated at the beginning of the application.
128) Format the dateTime variable in local storage.
129) Fix undefined genera and Pokédex entries (1016) by leaving them blank.
130) Fix blank abilities in the abilities list (1010).
131) Create a slideshow that includes the official artwork on the sprite-card.
137) See about changing this to a typescript implementation.
138) see about using SCSS modules for the CSS files.
150) Add how the Pokémon evolves to the info card.
151) Add a button to the info card to show the evolution chain of the Pokémon.
153) Look into having hidden abilities show in their own list.
154) Remove the dashes from the paradox Pokémon names.
155) Incorporate the TGC API.
157) Fix the input when the Pokémon name has a special character.

IN PROGRESS
-----------------------------------------------------------------------------------------
126) Click on the Types and pull up a list of all Pokémon with that type.
140) Add a loading spinner when the Pokémon is being fetched.
146) Add a tooltip to the secondary buttons in the header to show what they do.
149) Check all Pokémon names with special characters to ensure they are correct.

IMPLEMENTED
-----------------------------------------------------------------------------------------
001) Put json info into object. //pokemonObject is populated with the getPokemonObject
  function and pokemonSpeciesObject is populated with getPokemonSpeciesObject.
002) When clicking on the image, change to back views. //This has been completed with a
  click event.
003) Get prev button working //Now working properly. Decreases the Pokédex number and
  makes new fetch requests using the generatePreviousPokedexEntry function.
004) Get next button working //Now working properly. Increases the Pokédex number and
  makes new fetch requests using the generateNextPokedexEntry function.
005) Base stats into radar chart. //The chart for stats is generated from the
  displayStatsChart function, convertHexToRgba and getLargestStat are helper functions.
007) Show held items in a list format. //The list of held items is generated from the
  displayHeldItems function.
008) Make abilities and is_hidden into a property of Pokémon. //Abilities is a property,
  but is_hidden does not make sense to make a property at this time.
009) Make generation into a property of pokemon. //The property for generation is
 in the pokemonSpeciesObject generated from the getPokemonSpeciesObject function.
010) Get Pokéball to show in the window tab. //Pokéball is showing in the window tab.
  The pokéball.png file is the one showing.
012) Refactor to be more efficient. //The code has been refactored to be more efficient
  and readable using the Copilot AI.
013) Display Pokédex information in English. //Proper Pokédex entry is being shown using
  the getPokedexEntry function.
014) Change to fetch instead of ajax. //API calls are now using fetch requests instead of
  ajax requests with the fetchPokemon functions.
015) Allow generatePreviousPokedexEntry when user has searched by Pokémon name. //The user
  can search by Pokémon name and use the previous button
016) Allow generateNextPokedexEntry when user has searched by Pokémon name. //The user
  can search by Pokémon name and use the next button
017) If the Pokémon is legendary or mythical, have particles.js in the background. //The
  particles.js is now shown when the Pokémon is legendary or mythical.
018) Use the glass instead of the screen or info-screen. //The application is now using 
  Glassmorphism for the background of the cards.
019) Hover over abilities to get the explanation of what it does. // Created a list
  instead a hover. I believe the API call would be to slow to do this.
020) Uppercase generation and abilities after a hyphen. //The generation is now properly
  upper cased using the formatGeneration function.
021) Rewrite pokemon.css in Sass. //All of the CSS files have been rewritten in Sass and
  have been minified.
023) Merge the pokemonObject and pokemonSpeciesObject into one object. //The objects were
  merged into one object.
024) Try having the Type spans on the same line as the Type Header. //The three elements
  are now on the same plane.
025) Use small Pokéball as bullet points for the different info headers. //Small Pokéballs
  are now bullets for lists.
027) Redo the color scheme. //No longer needed. I have created a very clean and Pokémon
  inspired color scheme.
028) Use arrow functions were available. //The arrow functions are implemented throughout
  the javascript file.
029) Comment and create regions for the entire codebase. //The regions and comments have
  been added to the codebase.
031) Change to female form when clicking on the stats-chart. //Created a button instead of
  clicking the stats-chart.
032) If the Pokémon is a baby or ice, have particles.js be snow in the background. //The snow
  effect is now shown when the Pokémon is an ice type.
033) Look into DevExpress to see if their chart is better than chart.js. //I am very pleased
  with how chart.js is working currently.
034) Get rid of characters that do not belong (examples: #107 and #369). //Added a method
  called checkTextForUnwantedCharacters to remove these characters.
036) Show abilities in a grid including other information about the ability. // Created a
  list instead a hover. I believe the API call would be to slow to do this.
038) Hover over the base stat number to see the chart. //I have decided to move the stats
  chart to the right side of the screen.
040) Move the chart to its own screen to the left side of the screen. //Moved the stat chart to
  the left side of the screen in its own box.
041) Create web server from MSI gaming PC to host the website. //Decided that I will host this
  website on GitHub.
043) Add media queries for mobile devices. //Media queries have been added for five different
  sizes including mobile devices.
044) Make this site into a Progressive Web Application. //This site is now a Progressive Web 
  Application with a manifest.json file and a service worker.
045) Move Pokédex Entry above Base Stats. //Adjusted the order of the displayed information
  in pokedex.html.
046) Add animation for the buttons and the different screens when showing and hiding. //Used
  jQuery's fadeIn, fadeOut, and fadeToggle functions.
048) Capitalize letters after a hyphen. //Added a new function called capitalizeAfterHyphen to
  capitalize the first letter after the hyphen.
049) Fix colorization of the hidden abilities. //The hidden abilities color had an extra #
  making it a green color. Removed the character and it is showing as the correct color.
050) Resize the Held Items List. //The Held Items List is the same size as all of the other
  text items.
051) Experiment with claymorphism and glass textures. //I have decided to go with the neumorphism
  aesthetics for this Pokédex.
052) Use variables in the CSS file. //I have decided to go with using the Sass pre-compiler
  instead of using variables in CSS.
053) Fix the Stats Chart to fit within the screen. //Added a padding setting withing the stats
  chart options.
054) Change font and font size of the Stats Chart. //Added matching font and increased the font
  size of the Stats Chart.
055) Replace IF statements with ternary statements. //The IF statements that could be turned to
  ternary operators have been.
056) Push Enter key to search for Pokémon. //Added an event listener to the input
  textbox to call the generatePokemon function when the Enter key is pressed.
059) Get random 'en' flavor text for Pokédex entry. //The Pokédex entry is now random due to added
  logic in helpers.js in the getPokedexEntry function.
060) Add Height and Weight before the Base Stats. //Added the Height and Weight before the Base
  Stats and added them to the same line.
061) Have a front/back switch to shiny sprites. //Not needed, I decided to show all four sprites
  at one time.
062) Get rid of jQuery. //All jQuery has been removed from the modules and have been replaced
  with vanilla JavaScript.
063) Create different JavaScript modules. //The JavaScript has been separated into different
  modules depending on what the function does.
064) Limit the amount of characters for pokemon-textbox to 3. //The input pokemon-textbox has
  been limited to 3 characters.
065) Create different CSS modules. //The CSS has been separated into different modules depending
  on what elements are being styled.
066) Create a Regular Expression to check the Pokédex number. //Created a function to check against
  a Regular Expression to see if number from the input is valid.
067) Return the Pokédex number to the textbox if the textbox looses focus. //Added a blur event
  listener to recall the Pokémon's ID
069) Create a custom toast or modal when there is an error. //The toast is now in place and is called
  when there is an error.
070) Fix Mr. Mime and Mime Jr.'s names. //The dashes in the names have been fixed on the pokemon.name
  to show periods.
071) Show a Pokéball when a sprite is unavailable. //Now shows a Pokéball when the sprite is null.
  Still looking for better options.
074) Update the Pokémon's ID and name to have it be centered correctly. //The name and ID are now
  centered properly. Padding was added with <li> and had to remove it.
077) Recall previously viewed Pokémon via a button. //Created the Recall button to show the last 
  Pokémon that was viewed.
078) Look into how to implement service workers. //A service worker has been created and this is now
  a Progressive Web Application.
079) Look into storing the last Pokémon viewed before closing the window. //The last ID is now stored
  locally and calls the generatePokemon method.
080) Look into how to monitor if the width has changed. //Using window.onresize, I call
  getSystemInformation() and change elements based on the width.
081) Have a matrix background when a member of the Porygon line is selected. //The matrix background
  is now shown when a member of the Porygon line is selected.
082) Have gradients instead of a solid border color. //If the Pokémon has multiple types, the border
  will be a gradient instead of a solid color.
084) Only allow numbers in the search textbox. //This is check by RegEx in the inputCheck
  function.
085) Switch between forms if the Pokémon has multiple. //Creates a list of forms and allows the user
  to switch between the forms.
089) Change "Read Entry" to "Stop Reading" while synth.speak is active. //I am using icons instead of
  text to show the user what the button does.
091) Fix the header in mobile to stick to the bottom of the screen. //The header is now fixed to the
  bottom of the screen for mobile.
095) Animate the gradient border. //Decided not to do this and have a shadow of the 
  secondary type if the Pokémon has two, else the primary type.
096) Fix issues Pokémon numbers 899-905. //This is now fixed with the exception of a few sprites.
  This was caused by PokeAPI not having the correct information.
099) Capitalize all of the const variables and only import what is needed. //The const variables
  have been capitalized and only the necessary modules have been imported.
101) Fix the Pokémon name in the title to not have text after the hyphens. //The Pokémon name in the
  title now does not have the form name after the hyphens.
102) Turn the cursor to a Pokéball on hover for the Forms list. //used pokeball-bullet.png as the 
  image when hovering.
104) If the user inputs a number outside the Pokédex range, turn the text red. //The user number is 
  now red if outside of the range and the normal text color while inside the range.
105) Fix Pikachu Ph.D. // added a check to the punctuationNameCheck function. This specifically checks 
  for '-Phd'.
106) Use Glassmorphism everywhere or only with the type div. //I am using Glassmorphism for the 
  background of the cards and the header.
107) Glassmorphism with gradients for multi-type Pokémon. //I have a radius gradient for the background 
  of the cards.
108) Rename "Screen" to "Card" in the codebase. //I have replaced all instances of "Screen" with 
 "Card".
109) Be able to click on something and it takes you to the top of the page. //The user is returned to 
  the top when you click on one of the bottom cards
110) Create a Recall button that will retrieve the last viewed Pokémon. //There is a LocalStorage item 
  that is called when the Recall button is pressed.
114) Hide Recall button if the lastPokémon is null. //I have added a check in the makeButtonsDisappear 
  function.
123) Get rid of Toast when the user clicks on a button. //I have added the removal of the Toast to 
  the bottom of buttonClick in main.js.
124) Make the Toast static so that it does not move when the user scrolls. //Changed the position of 
  #root .toast to fixed in the glass.css file.
125) Fix KOMMO-O's Pokédex forms (784). //Added logic to the requestForm function in requests.js where 
  I had hard coded KOMMO-O's name.
127) Add '(Hidden)' to the hidden abilities in the abilities list. //Added an if check in the helpers.js 
  file to add '(Hidden)' after the name. For the time being, I am leaving it read as well.
132) Fix the bug that allows the lastPokémon and currentPokémon to be the same. //Fixed with simplified 
  storage logic that explicitly prevents same values by clearing LAST_POKEMON when they would be equal.
133) Change the mouse to a pokéball when hovering over the types divs. //Used pokeball-bullet.png as the 
  image when hovering.
134) Go button will be invisible when no active Pokémon or empty search. //Decided to leave the Go button 
  visible at all times.
135) Include Cries from pokemon API call. //I have added the a button that allows the user to play the 
  Pokémon's cry with the playPokemonCry function in the helpers file.
136) Change official artwork instead of the sprites. //Now displays 1 default and 1 shiny official artwork 
  instead of the 4 sprite images.
139) Make the header sticky on mobile and tablet. //The header is now sticky on all devices: mobile, 
  tablet, and desktop.
141) Fix the Android pokedex entry read issue. //The Android Pokédex entry is now read properly with the 
  TTS properly implemented.
143) Show the sprites unless they are null, then show the official artwork. //Implemented priority loading 
  system that attempts to load sprites first, then falls back to official artwork if sprites fail or are null.
144) Split the index.html file into a css file and a js file. //The index.html file has been split into
  index.css and index.js files. The old index.html file has been removed.
145) Split the style.css file into multiple files. //Successfully modularized the monolithic style.css 
  into 14 specialized CSS files and the old style.css file has been removed.
147) Add a feature that downloads the PWA as an app when you click the Pokédex icon. //The PWA is now 
  downloadable as an app.
148) Fix excessive padding between header and info card for mobile, tablet, and desktop. //Reduced padding 
  and adjusted info-card margins for better spacing across all devices.
152) Add back the ability to search by Pokémon name. //The user can now search by Pokémon name again by 
  clicking the info text in the header.
156) Move the speed stat to the bottom of the chart. //The speed stat is now the last stat in the chart
  and the Sp Attack and Sp Defense stats are now in the correct order as well.